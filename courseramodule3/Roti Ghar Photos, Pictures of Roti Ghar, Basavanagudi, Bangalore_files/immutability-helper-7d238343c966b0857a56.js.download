(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[93],{RsOY:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=n("QLaP"),r=Object.prototype.hasOwnProperty,o=Array.prototype.splice,u=Object.prototype.toString;function c(t){return u.call(t).slice(8,-1)}var i=Object.assign||function(t,e){return s(e).forEach((function(n){r.call(e,n)&&(t[n]=e[n])})),t},s="function"==typeof Object.getOwnPropertySymbols?function(t){return Object.keys(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.keys(t)};function p(t){return Array.isArray(t)?i(t.constructor(t.length),t):"Map"===c(t)?new Map(t):"Set"===c(t)?new Set(t):t&&"object"==typeof t?i(Object.create(Object.getPrototypeOf(t)),t):t}var f=function(){function t(){this.commands=i({},d),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(t,e){return t===e},this.update.newContext=function(){return(new t).update}}return Object.defineProperty(t.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(t){this.update.isEquals=t},enumerable:!0,configurable:!0}),t.prototype.extend=function(t,e){this.commands[t]=e},t.prototype.update=function(t,e){var n=this,o="function"==typeof e?{$apply:e}:e;Array.isArray(t)&&Array.isArray(o)||a(!Array.isArray(o),"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."),a("object"==typeof o&&null!==o,"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the following commands: %s.",Object.keys(this.commands).join(", "));var u=t;return s(o).forEach((function(e){if(r.call(n.commands,e)){var a=t===u;u=n.commands[e](o[e],u,o,t),a&&n.isEquals(u,t)&&(u=t)}else{var i="Map"===c(t)?n.update(t.get(e),o[e]):n.update(t[e],o[e]),s="Map"===c(u)?u.get(e):u[e];n.isEquals(i,s)&&(void 0!==i||r.call(t,e))||(u===t&&(u=p(t)),"Map"===c(u)?u.set(e,i):u[e]=i)}})),u},t}();e.Context=f;var d={$push:function(t,e,n){return l(e,n,"$push"),t.length?e.concat(t):e},$unshift:function(t,e,n){return l(e,n,"$unshift"),t.length?t.concat(e):e},$splice:function(t,e,n,r){return function(t,e){a(Array.isArray(t),"Expected $splice target to be an array; got %s",t),g(e.$splice)}(e,n),t.forEach((function(t){g(t),e===r&&t.length&&(e=p(r)),o.apply(e,t)})),e},$set:function(t,e,n){return function(t){a(1===Object.keys(t).length,"Cannot have more than one key in an object with $set")}(n),t},$toggle:function(t,e){h(t,"$toggle");var n=t.length?p(e):e;return t.forEach((function(t){n[t]=!e[t]})),n},$unset:function(t,e,n,a){return h(t,"$unset"),t.forEach((function(t){Object.hasOwnProperty.call(e,t)&&(e===a&&(e=p(a)),delete e[t])})),e},$add:function(t,e,n,a){return b(e,"$add"),h(t,"$add"),"Map"===c(e)?t.forEach((function(t){var n=t[0],r=t[1];e===a&&e.get(n)!==r&&(e=p(a)),e.set(n,r)})):t.forEach((function(t){e!==a||e.has(t)||(e=p(a)),e.add(t)})),e},$remove:function(t,e,n,a){return b(e,"$remove"),h(t,"$remove"),t.forEach((function(t){e===a&&e.has(t)&&(e=p(a)),e.delete(t)})),e},$merge:function(t,e,n,r){var o,u;return o=e,a((u=t)&&"object"==typeof u,"update(): $merge expects a spec of type 'object'; got %s",u),a(o&&"object"==typeof o,"update(): $merge expects a target of type 'object'; got %s",o),s(t).forEach((function(n){t[n]!==e[n]&&(e===r&&(e=p(r)),e[n]=t[n])})),e},$apply:function(t,e){var n;return a("function"==typeof(n=t),"update(): expected spec of $apply to be a function; got %s.",n),t(e)}},y=new f;function l(t,e,n){a(Array.isArray(t),"update(): expected target of %s to be an array; got %s.",n,t),h(e[n],n)}function h(t,e){a(Array.isArray(t),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",e,t)}function g(t){a(Array.isArray(t),"update(): expected spec of $splice to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",t)}function b(t,e){var n=c(t);a("Map"===n||"Set"===n,"update(): %s expects a target of type Set or Map; got %s",e,n)}e.isEquals=y.update.isEquals,e.extend=y.extend,e.default=y.update,e.default.default=t.exports=i(e.default,e)}}]);
//# sourceMappingURL=immutability-helper-7d238343c966b0857a56.js.map